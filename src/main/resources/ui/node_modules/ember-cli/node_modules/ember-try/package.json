{
  "name": "ember-try",
  "version": "0.2.6",
  "description": "An ember-cli addon to test against multiple bower dependencies, such as ember and ember-data.",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "build": "ember build",
    "start": "ember server",
    "client-test": "./all-commands.sh",
    "node-test": "mocha test/**/*.js",
    "node-test-with-coverage": "istanbul cover _mocha test/**/*.js && ./upload-coverage.sh",
    "lint": "mocha lint-test",
    "jscs": "jscs lib test",
    "test": "npm run-script jscs && npm run-script lint && npm run-script node-test && npm run-script client-test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ember-cli/ember-try"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": {
    "name": "Katie Gengler"
  },
  "license": "MIT",
  "devDependencies": {
    "broccoli-asset-rev": "^2.2.0",
    "chai": "^3.5.0",
    "codeclimate-test-reporter": "^0.3.1",
    "ember-cli": "2.3.0",
    "ember-cli-app-version": "^1.0.0",
    "ember-cli-dependency-checker": "^1.2.0",
    "ember-cli-htmlbars": "^1.0.1",
    "ember-cli-htmlbars-inline-precompile": "^0.3.1",
    "ember-cli-inject-live-reload": "^1.3.1",
    "ember-cli-qunit": "^1.2.1",
    "ember-cli-release": "0.2.8",
    "ember-cli-sri": "^2.0.0",
    "ember-cli-uglify": "^1.2.0",
    "ember-disable-prototype-extensions": "^1.1.0",
    "ember-disable-proxy-controllers": "^1.0.1",
    "ember-export-application-global": "^1.0.4",
    "ember-load-initializers": "^0.5.0",
    "ember-resolver": "^2.0.3",
    "glob": "^7.0.0",
    "istanbul": "1.0.0-alpha.2",
    "jscs": "^2.0.0",
    "loader.js": "^4.0.0",
    "mocha": "^2.2.5",
    "mocha-eslint": "^2.0.0",
    "mockery": "^1.4.0",
    "tmp-sync": "^1.1.0"
  },
  "keywords": [
    "ember-addon",
    "testing"
  ],
  "dependencies": {
    "chalk": "^1.0.0",
    "cli-table2": "^0.2.0",
    "core-object": "^1.1.0",
    "debug": "^2.2.0",
    "ember-cli-babel": "^5.1.3",
    "ember-cli-version-checker": "^1.1.6",
    "ember-try-config": "^2.0.1",
    "extend": "^3.0.0",
    "fs-extra": "^0.26.0",
    "promise-map-series": "^0.2.1",
    "resolve": "^1.1.6",
    "rimraf": "^2.3.2",
    "rsvp": "^3.0.17",
    "semver": "^5.1.0",
    "sync-exec": "^0.6.2"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "readme": "# ember-try [![Build Status](https://travis-ci.org/ember-cli/ember-try.svg?branch=master)](https://travis-ci.org/ember-cli/ember-try) [![Ember Observer Score](http://emberobserver.com/badges/ember-try.svg)](http://emberobserver.com/addons/ember-try) [![Code Climate](https://codeclimate.com/github/ember-cli/ember-try/badges/gpa.svg)](https://codeclimate.com/github/ember-cli/ember-try) [![Test Coverage](https://codeclimate.com/github/ember-cli/ember-try/badges/coverage.svg)](https://codeclimate.com/github/ember-cli/ember-try/coverage)\n\nAn ember-cli addon to test against multiple bower and npm dependencies, such as `ember` and `ember-data`.\n\n### Installation\n\n```\nember install ember-try\n```\n\n### Usage\n\nThis addon provides a few commands:\n\n### `ember try:each`\n\nThis command will run `ember test` or the configured command with each scenario's specified in the config and exit appropriately.\n\nThis command is especially useful to use on CI to test against multiple `ember` versions.\n\nIn order to use an alternate config path or to group various scenarios together in a single `try:each` run, you can use\nthe `--config-path` option.\n\n```\n  ember try:each --config-path=\"config/legacy-scenarios.js\"\n```\n\nIf you need to know the scenario that is being ran (i.e. to customize a test output file name) you can use the `EMBER_TRY_CURRENT_SCENARIO`\nenvironment variable.\n\n#### `ember try:one <scenario> (...options) --- <command (Default: test)>`\n\nThis command will run any `ember-cli` command with the specified scenario. The command will default to `ember test`, if no command is specified on the command-line or in configuration.\n\nFor example:\n\n```\n  ember try:one ember-1.11-with-ember-data-beta-16 --- ember test --reporter xunit\n```\n\nor\n\n```\n  ember try:one ember-1.11-with-ember-data-beta-16 --- ember serve\n```\n\nWhen running in a CI environment where changes are discarded you can skip resetting your environment back to its original state by specifying --skip-cleanup=true as an option to ember try.\n*Warning: If you use this option and, without cleaning up, build and deploy as the result of a passing test suite, it will build with the last set of dependencies ember try was run with.*\n\n```\n  ember try:one ember-1.11 --skip-cleanup=true --- ember test\n```\n\nIn order to use an alternate config path or to group various scenarios, you can use the `--config-path` option.\n\n```\n  ember try:one ember-1.13 --config-path=\"config/legacy-scenarios.js\"\n```\n\n#### `ember try:reset`\n\nThis command restores the original `bower.json` from `bower.json.ember-try`, `rm -rf`s `bower_components` and runs `bower install`. For use if any of the other commands fail to clean up after (they run this by default on completion).\n\n#### `ember try:ember <semver-string>`\n\nRuns `ember test` or the command in config for each version of Ember that is possible under the semver string given. Configuration follows the rules given under the `versionCompatibility` heading below.\n\n#### `ember try:config`\n\nDisplays the configuration that will be used. Also takes an optional `--config-path`.\n\n#### (DEPRECATED) `ember try:testall`\n\nThis command was renamed to `ember try:each` to better reflect what it does. This command still works, though.\n\n#### (DEPRECATED) `ember try <scenario> <command (Default: test)>`\n\nThis command is deprecated in favor of `ember try:one`. There are several bugs with passing options to the specified command that will not be fixed.\n\n\n### Config\n\n##### versionCompatibility\nIf you're using `ember-try` with an Ember addon, there is a short cut to test many Ember versions. In your `package.json` under the `ember-addon` key, add the following: \n\n```json\n  \"ember-addon\": {\n    \"versionCompatibility\": {\n       \"ember\": \">1.11.0 <=2.0.0\"\n    }\n  }\n```\n\nThe value for \"ember\" can be any valid [semver statement](https://github.com/npm/node-semver).\nThis will autogenerate scenarios for each version of Ember that matches the statement. It will also include scenarios for `beta` and `canary` channels of Ember that will be allowed to fail. \nThese scenarios will ONLY be used if `scenarios` is NOT a key in the configuration file being used.\nIf `useVersionCompatibility` is set to `true` in the config file, the autogenerated scenarios will deep merge with any scenarios in the config file. For example, you could override just the `allowedToFail` property of the `ember-beta` scenario.\n\nTo keep this from getting out of hand, `ember-try` will limit the versions of Ember used to the lasted point release per minor version. For example, \">1.11.0 <=2.0.0\", would (as of writing) run with versions ['1.11.4', '1.12.2', '1.13.13', '2.0.0'].\n\n##### Configuration Files\n\nConfiguration will be read from a file in your ember app in `config/ember-try.js`. It should look like:\n\n```js\n/*jshint node:true*/\n\nmodule.exports = function() {\n  return {\n  /*\n    `command` - a single command that, if set, will be the default command used by `ember-try`.\n    P.S. The command doesn't need to be an `ember <something>` command, they can be anything.\n    Keep in mind that this config file is JavaScript, so you can code in here to determine the command.\n  */\n  command: 'ember test --reporter xunit',\n  /*\n    `bowerOptions` - options to be passed to `bower`.\n  */\n  bowerOptions: ['--allow-root=true'],\n  /*\n    `npmOptions` - options to be passed to `npm`.\n  */\n  npmOptions: ['--loglevel=silent', '--no-shrinkwrap=true'],\n  /*\n    If set to true, the `versionCompatibility` key under `ember-addon` in `package.json` will be used to\n    automatically generate scenarios that will deep merge with any in this configuration file.\n  */\n  useVersionCompatibility: true,\n  scenarios: [\n    {\n      name: 'Ember 1.10 with ember-data',\n\n      /*\n        `command` can also be overridden at the scenario level.\n      */\n      command: 'ember test --filter ember-1-10',\n      bower: {\n        dependencies: {\n          'ember': '1.10.0',\n          'ember-data': '1.0.0-beta.15'\n        }\n      },\n    },\n    {\n      name: 'Ember 1.11.0-beta.5',\n      bower: {\n        dependencies: {\n          'ember': '1.11.0-beta.5'\n        }\n      }\n    },\n    {\n      name: 'Ember canary with Ember-Data 2.3.0',\n      /*\n        `allowedToFail` - If true, if this scenario fails it will not fail the entire try command.\n      */\n      allowedToFail: true,\n      npm: {\n        devDependencies: {\n          'ember-data': '2.3.0'\n        }\n      },\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#canary'\n        },\n        resolutions: {\n          'ember': 'canary'\n        }\n      }\n    },\n    {\n      name: 'Ember beta',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#beta'\n        },\n        resolutions: { // Resolutions are only necessary when they do not match the version specified in `dependencies`\n          'ember': 'beta'\n        }\n      }\n    }\n  ]};\n};\n```\n\nScenarios are sets of dependencies (`bower` and `npm` only). They can be specified exactly as in the `bower.json` or `package.json`\nThe `name` can be used to try just one scenario using the `ember try:one` command.\n\nIf no `config/ember-try.js` file is present, the default config will be used. This is the current default config:\n\n```js\n{\n  scenarios: [\n    {\n      name: 'default',\n      bower: {\n        dependencies: { } /* No dependencies needed as the\n                             default is already specified in\n                             the consuming app's bower.json */\n      }\n    },\n    {\n      name: 'ember-release',\n      bower: {\n        dependencies: {\n          ember: 'release'\n        }\n      }\n    },\n    {\n      name: 'ember-beta',\n      bower: {\n        dependencies: {\n          ember: 'beta'\n        }\n      }\n    },\n    {\n      name: 'ember-canary',\n      bower: {\n        dependencies: {\n          ember: 'canary'\n        }\n      }\n    }\n  ]\n}\n```\n### Video \n[![How to use EmberTry](https://i.vimeocdn.com/video/559399937_500.jpg)](https://vimeo.com/157688157)\n\nSee an example of using `ember-try` for CI [here](https://github.com/kategengler/ember-feature-flags/commit/aaf0226975c76630c875cf6b923fdc23b025aa79), and the resulting build [output](https://travis-ci.org/kategengler/ember-feature-flags/builds/55597086).\n\n### Special Thanks\n\n- Much credit is due to [Edward Faulkner](https://github.com/ef4) The scripts in [liquid-fire](https://github.com/ef4/liquid-fire) that test against multiple ember versions were the inspiration for this project.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ember-cli/ember-try/issues"
  },
  "homepage": "https://github.com/ember-cli/ember-try",
  "_id": "ember-try@0.2.6",
  "_shasum": "10a0a694dc0178e45385077e035b1fd86f7cca03",
  "_from": "ember-try@^0.2.2",
  "_resolved": "https://registry.npmjs.org/ember-try/-/ember-try-0.2.6.tgz"
}
